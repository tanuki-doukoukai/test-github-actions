name: Merge staging to develop with GitHub App

on:
  workflow_dispatch:

jobs:
  merge-staging-to-develop:
    runs-on: ubuntu-latest
    env:
      USER_NAME: "tanuki-auto-merge[bot]"
      EMAIL: "1224231+tanuki-auto-merge[bot]@users.noreply.github.com"
      REPO: ${{ github.repository }}
      BASE_BRANCH: develop
      HEAD_BRANCH: staging
      PR_TITLE: "[Conflict] staging -> develop"
      PR_BODY_FILE: .github/pull_request_template.md
      TANUKI_APP_ID: ${{ secrets.TANUKI_2_APP_ID }}
      TANUKI_PRIVATE_KEY: ${{ secrets.TANUKI_2_PRIVATE_KEY }}

    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.TANUKI_APP_ID }}
          private-key: ${{ secrets.TANUKI_PRIVATE_KEY }}
          
      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Checkout develop branch
        uses: actions/checkout@v4
        with:
          ref: develop
          token: ${{ steps.app-token.outputs.token }}
          fetch-depth: 0

      - name: Reset Remote URL with App Token
        run: |
          git remote set-url origin https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/${{ env.REPO }}.git

      - name: Set up Git config
        run: |
          git config user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com'

      - name: Fetch staging branch
        run: |
          git fetch origin ${{ env.HEAD_BRANCH }}:${{ env.HEAD_BRANCH }}

      - name: Check for Merge Conflicts
        id: merge_check
        run: |
          if git merge --no-commit ${{ env.HEAD_BRANCH }}; then
            echo "has_conflict=false" >> "$GITHUB_OUTPUT"
          else
            echo "has_conflict=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Reset Merge State (if needed)
        run: git reset --merge || true

      - name: Merge and Push (No Conflict)
        if: steps.merge_check.outputs.has_conflict == 'false'
        run: |
          git merge --no-edit ${{ env.HEAD_BRANCH }}
          git push origin ${{ env.BASE_BRANCH }}

          COMMIT_SHA=$(git rev-parse HEAD)
          echo "üîç Last pushed commit SHA: $COMMIT_SHA"

          AUTHOR_LOGIN=$(curl -s \
            -H "Authorization: token ${{ steps.app-token.outputs.token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ env.REPO }}/commits/$COMMIT_SHA \
            | jq -r '.author.login')

          echo "üîç Commit Author: $AUTHOR_LOGIN"

          if [ "$AUTHOR_LOGIN" = "tanuki-auto-merge[bot]" ]; then
            echo "‚úÖ Push was performed by GitHub App: $AUTHOR_LOGIN"
          else
            echo "‚ö†Ô∏è WARNING: Push was performed by unexpected actor: $AUTHOR_LOGIN"
            echo "üí° Check if the GitHub App is properly registered under 'Allow specified actors to bypass required pull requests'"
          fi

      - name: Create Conflict Resolution PR
        if: steps.merge_check.outputs.has_conflict == 'true'
        run: |
          FIX_CONFLICT_BRANCH=auto/staging-$(date +%s)
          git checkout -b $FIX_CONFLICT_BRANCH ${{ env.HEAD_BRANCH }}
          git push origin $FIX_CONFLICT_BRANCH

          COMMITS=$( \
            curl -s \
              -H "Authorization: token ${{ steps.app-token.outputs.token }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ env.REPO }}/commits?sha=${{ env.HEAD_BRANCH }}&per_page=10")

          LAST_HUMAN_USER=$(echo "$COMMITS" | jq -r '.[] | select(.author.login != null and (.author.login | test("\\[bot\\]$") | not)) | .author.login' | head -n 1)

          echo "üì¶ Creating Pull Request due to conflict..."

          PR_BODY=$(cat "${{ env.PR_BODY_FILE }}")

          curl -s -X POST \
            -H "Authorization: token ${{ steps.app-token.outputs.token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ env.REPO }}/pulls \
            -d "$(jq -n \
              --arg title "${{ env.PR_TITLE }}" \
              --arg head "$FIX_CONFLICT_BRANCH" \
              --arg base "${{ env.BASE_BRANCH }}" \
              --arg body "$PR_BODY" \
              '{title: $title, head: $head, base: $base, body: $body}')"

