name: Auto Merge on CI Success

on:
  workflow_run:
    workflows:
      - "*"
    types:
      - completed
    branches:
      - 'auto/staging-*'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.workflow_run.head_branch }}
  cancel-in-progress: true

env:
  BASE_BRANCH: develop

jobs:
  auto-merge-on-ci-success:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      ci_status: ${{ steps.check-ci-status.outputs.result }}
      pr_number: ${{ steps.find-pull-request.outputs.number }}
      pr_title: ${{ steps.find-pull-request.outputs.title }}
      pr_html_url: ${{ steps.find-pull-request.outputs.html_url }}
      pr_original_author: ${{ steps.find-pull-request.outputs.original_author }}
    steps:
      - id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.TANUKI_2_APP_ID }}
          private-key: ${{ secrets.TANUKI_2_PRIVATE_KEY }}

      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/github-script@v7
        id: check-ci-status
        with:
          script: |
            return await require('./.github/scripts/check-ci-status.cjs')({ github, context })
          result-encoding: string
          github-token: ${{ steps.app-token.outputs.token }}
  
      - name: Find Pull Request
        id: find-pull-request
        if: steps.check-ci-status.outputs.result != 'IN_PROGRESS'
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const headSha = context.payload.workflow_run.head_sha;
            const headBranch = context.payload.workflow_run.head_branch;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            const res = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner,
              repo,
              commit_sha: headSha
            });

            const pr = res.data.find(pr =>
              pr.state === 'open' &&
              pr.head.ref === headBranch &&
              pr.base.ref === process.env.BASE_BRANCH
            );

            core.setOutput('number', pr?.number ?? '');
            core.setOutput('html_url', pr?.html_url ?? '');
            core.setOutput('title', pr?.title ?? '');
            core.setOutput('original_author', pr?.body?.match(/original author: (.+)/)?.[1] ?? '');

      - name: Merge Pull Request
        if: steps.check-ci-status.outputs.result == 'SUCCESS_ALL'
        run: |
          gh pr merge ${{ steps.find-pull-request.outputs.number }} --merge --auto
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Request Pull Request Review
        if: >
          steps.check-ci-status.outputs.result != 'IN_PROGRESS' &&
          steps.check-ci-status.outputs.result != 'SUCCESS_ALL'
        run: |
          REVIEWERS_JSON="{\"reviewers\":[\"${{ steps.find-pull-request.outputs.original_author }}\"]}"
          curl -s -X POST \
            -H "Authorization: token ${{ steps.app-token.outputs.token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls/${{ steps.find-pull-request.outputs.number }}/requested_reviewers \
            -d "$REVIEWERS_JSON"

  dispatch-notify:
    needs: auto-merge-on-ci-success
    if: > 
      needs.auto-merge-on-ci-success.outputs.ci_status != 'IN_PROGRESS' && 
      needs.auto-merge-on-ci-success.outputs.ci_status != 'SUCCESS_ALL' &&
      needs.auto-merge-on-ci-success.outputs.pr_number != ''
    uses: ./.github/workflows/pr-required-action-notify.yml
    with:
      required_action_type: auto-create-pr-fail-ci
      author: ${{ needs.auto-merge-on-ci-success.outputs.pr_original_author }}
      pr_number: ${{ needs.auto-merge-on-ci-success.outputs.pr_number }}
      pr_title: ${{ needs.auto-merge-on-ci-success.outputs.pr_title }}
      pr_html_url: ${{ needs.auto-merge-on-ci-success.outputs.pr_html_url }}
    secrets:
      app_id: ${{ secrets.TANUKI_2_APP_ID }}
      app_private_key: ${{ secrets.TANUKI_2_PRIVATE_KEY }}
