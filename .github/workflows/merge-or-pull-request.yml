name: Merge or Pull Request with GitHub App (via tibdex/github-app-token)

on:
  workflow_call:
    inputs:
      head_branch:
        required: true
        type: string
      base_branch:
        required: true
        type: string
      next_workflow:
        required: false
        type: string

jobs:
  merge-or-pr:
    runs-on: ubuntu-latest
    env:
      USER_NAME: "github-app[bot]"
      EMAIL: "github-app[bot]@users.noreply.github.com"
      REPO: ${{ github.repository }}
      BASE_BRANCH: ${{ inputs.base_branch }}
      HEAD_BRANCH: ${{ inputs.head_branch }}
      NEXT_WORKFLOW: ${{ inputs.next_workflow || '' }}
      PR_TITLE: "[Conflict] ${{ inputs.head_branch }} -> ${{ inputs.base_branch }}"
      PR_BODY_FILE: .github/pull_request_template.md

    steps:
      - name: Check if secrets are loaded (App ID & Private Key)
        run: |
          echo "✅ TANUKI_APP_ID (前3文字): ${TANUKI_APP_ID:0:3}..."
          echo "✅ TANUKI_PRIVATE_KEY の行数: $(echo "$TANUKI_PRIVATE_KEY" | wc -l) 行"
          echo "✅ TANUKI_PRIVATE_KEY の先頭行: $(echo "$TANUKI_PRIVATE_KEY" | head -n 1)"
        env:
          TANUKI_APP_ID: ${{ secrets.TANUKI_APP_ID }}
          TANUKI_PRIVATE_KEY: ${{ secrets.TANUKI_PRIVATE_KEY }}

      - name: Generate GitHub App Token using tibdex/github-app-token
        id: instllation_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.TANUKI_APP_ID }}
          private_key: ${{ secrets.TANUKI_PRIVATE_KEY }}

      - name: Checkout Base Branch (${BASE_BRANCH})
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BASE_BRANCH }}
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config user.name "${{ env.USER_NAME }}"
          git config user.email "${{ env.EMAIL }}"

      - name: Fetch Source Branch (${HEAD_BRANCH})
        run: |
          git fetch origin ${{ env.HEAD_BRANCH }}:${{ env.HEAD_BRANCH }}

      - name: Check Merge Conflict
        id: merge_check
        run: |
          if git merge --no-commit ${{ env.HEAD_BRANCH }}; then
            echo "has_conflict=false" >> "$GITHUB_OUTPUT"
          else
            echo "has_conflict=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Reset Merge State
        run: git reset --merge || true

      - name: Merge
        if: steps.merge_check.outputs.has_conflict == 'false'
        run: |
          git merge --no-edit ${{ env.HEAD_BRANCH }}
          git remote set-url origin https://x-access-token:${{ steps.instllation_token.outputs.token }}@github.com/${{ env.REPO }}.git
          git push origin ${{ env.BASE_BRANCH }}

      - name: Trigger Next Workflow
        if: steps.merge_check.outputs.has_conflict == 'false' && env.NEXT_WORKFLOW != ''
        run: |
          echo "${{ steps.instllation_token.outputs.token }}" | gh auth login --with-token
          gh workflow run ${{ env.NEXT_WORKFLOW }} --ref ${{ env.BASE_BRANCH }}

      - name: Create Conflict Resolution Branch and Pull Request
        if: steps.merge_check.outputs.has_conflict == 'true'
        run: |
          FIX_CONFLICT_BRANCH=auto/${{ env.HEAD_BRANCH }}-$(date +%s)
          git checkout -b $FIX_CONFLICT_BRANCH ${{ env.HEAD_BRANCH }}
          git push origin $FIX_CONFLICT_BRANCH

          COMMITS=$( \
            curl -s \
              -H "Authorization: token ${{ steps.instllation_token.outputs.token }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/$REPO/commits?sha=$HEAD_BRANCH&per_page=10")

          LAST_HUMAN_USER=$(echo "$COMMITS" | jq -r '.[] | select(.author.login != null and (.author.login | test("\\[bot\\]$") | not)) | .author.login' | head -n 1)

          echo "${{ steps.instllation_token.outputs.token }}" | gh auth login --with-token
          gh pr create \
            --base ${{ env.BASE_BRANCH }} \
            --head $FIX_CONFLICT_BRANCH \
            --title "${{ env.PR_TITLE }}" \
            --reviewer $LAST_HUMAN_USER \
            --body-file "${{ env.PR_BODY_FILE }}"
